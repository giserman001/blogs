(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{243:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql基本知识总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql基本知识总结"}},[t._v("#")]),t._v(" mysql基本知识总结")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#数据库管理系统-dbms-的概述"}},[t._v("数据库管理系统(DBMS)的概述")])]),a("li",[a("a",{attrs:{href:"#安装mysql"}},[t._v("安装MySQL")])]),a("li",[a("a",{attrs:{href:"#服务器操作"}},[t._v("服务器操作")])]),a("li",[a("a",{attrs:{href:"#客户登操作"}},[t._v("客户登操作")])]),a("li",[a("a",{attrs:{href:"#sql"}},[t._v("SQL")])]),a("li",[a("a",{attrs:{href:"#sql语法"}},[t._v("SQL语法")])]),a("li",[a("a",{attrs:{href:"#sql语句分类"}},[t._v("SQL语句分类(*)")])]),a("li",[a("a",{attrs:{href:"#ddl"}},[t._v("DDL")])]),a("li",[a("a",{attrs:{href:"#dql"}},[t._v("DQL")])]),a("li",[a("a",{attrs:{href:"#dml-数据操作语言，它是对表记录的操作-增、删、改-！"}},[t._v("DML(数据操作语言，它是对表记录的操作(增、删、改)！)")])]),a("li",[a("a",{attrs:{href:"#update"}},[t._v("UPDATE")])]),a("li",[a("a",{attrs:{href:"#dcl-理解"}},[t._v("DCL(理解)")])]),a("li",[a("a",{attrs:{href:"#dql-数据查询语言"}},[t._v("DQL -- 数据查询语言")])]),a("li",[a("a",{attrs:{href:"#约束"}},[t._v("约束")])]),a("li",[a("a",{attrs:{href:"#编码"}},[t._v("编码")])]),a("li",[a("a",{attrs:{href:"#备份与恢复"}},[t._v("备份与恢复")])]),a("li",[a("a",{attrs:{href:"#多表查询"}},[t._v("多表查询")])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"数据库管理系统-dbms-的概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库管理系统-dbms-的概述"}},[t._v("#")]),t._v(" 数据库管理系统(DBMS)的概述")]),t._v(" "),a("ol",[a("li",[t._v("什么是DBMS：数据的仓库")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("方便查询")]),t._v(" "),a("li",[t._v("可存储的数据量大")]),t._v(" "),a("li",[t._v("保证数据的完整、一致")]),t._v(" "),a("li",[t._v("安全可靠")])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("DBMS的发展：今天主流数据库为关系型数据库管理系统（RDBMS 使用表格存储数据）")]),t._v(" "),a("li",[t._v("常见DBMS：Orcale、MySQL、SQL Server、DB2、Sybase")]),t._v(" "),a("li",[t._v("DBMS = 管理程序 + 多个数据库(DB)")]),t._v(" "),a("li",[t._v("DB = 多个table(不只是table，但这里先不介绍其他组成部分)")]),t._v(" "),a("li",[t._v("table的结构(即表结构)和table的记录(即表记录)的区别！")]),t._v(" "),a("li",[t._v("应用程序与DBMS：应用程序使得DBMS来存储数据！")])]),t._v(" "),a("h3",{attrs:{id:"安装mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装mysql"}},[t._v("#")]),t._v(" 安装MySQL")]),t._v(" "),a("ol",[a("li",[t._v("MySQL安装成功后会在两个目录中存储文件：")])]),t._v(" "),a("blockquote",[a("p",[t._v("D:\\Program Files\\MySQL\\MySQL Server 5.1：DBMS管理程序\nC:\\ProgramData\\MySQL\\MySQL Server 5.1\\data：DBMS数据库文件(卸载MySQL时不会删除这个目录，需要自己手动删除)")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("MySQL重要文件")])]),t._v(" "),a("blockquote",[a("p",[t._v("D:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysql.exe：客户端程序，用来操作服务器。但必须保证服务器已开启才能连接上！\nD:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysqld.exe：服务器程序，必须先启动它，客户端才能连接上服务器。\nD:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\my.ini：服务器配置文件")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("C:\\ProgramData\\MySQL\\MySQL Server 5.1\\data")])]),t._v(" "),a("blockquote",[a("p",[t._v("该目录下的每个目录表示一个数据库，例如该目录下有一个mysql目录，那么说明你的DBMS中有一个名为mysql的database。\n在某个数据库目录下会有0~N个扩展名为frm的文件，每个frm文件表示一个table。你不要用文本编辑器打开它，它是由DBMS来读写的！")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("my.ini，MySQL最为重要的配置文件")])]),t._v(" "),a("blockquote",[a("p",[t._v("配置MySQL的端口：默认为3306，没有必要去修改它；\n配置字符编码：\n* [client]下配置客户端编码：default-character-set=gbk\n* [mysqld]下配置服务器编码：character-set-server=utf8\n配置二进制数据大小上限：\n* 在[mysqld]下配置：max_allowed_packet=8M")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("C:\\ProgramData\\MySQL\\MySQL Server 5.5\\data目录下：有一个目录就有一个数据库！！！每个数据库目录下，有一个frm文件，就说明有一张表！")])]),t._v(" "),a("h3",{attrs:{id:"服务器操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器操作"}},[t._v("#")]),t._v(" 服务器操作")]),t._v(" "),a("ol",[a("li",[t._v("开启服务器(必须保证mysql为windows服务)：net start mysql")])]),t._v(" "),a("blockquote",[a("p",[t._v("查看进程表中是否存在：mysqld.exe进程(存在)")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("关闭服务器(必须保证mysql为windows服务)：net stop mysql")])]),t._v(" "),a("blockquote",[a("p",[t._v("查看进程表中是否存在：mysqld.exe进程(不存在)")])]),t._v(" "),a("h3",{attrs:{id:"客户登操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户登操作"}},[t._v("#")]),t._v(" 客户登操作")]),t._v(" "),a("ol",[a("li",[t._v("打开cmd,登录服务器：mysql -uroot -p123 -hlocalhost")])]),t._v(" "),a("blockquote",[a("p",[t._v("-u：后面跟随用户名\n-p：后面跟随密码\n-h：后面跟随IP")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("退出服务器：exit或quit")])]),t._v(" "),a("h3",{attrs:{id:"sql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql"}},[t._v("#")]),t._v(" SQL")]),t._v(" "),a("ol",[a("li",[t._v("什么是SQL：结构化查询语言(Structured Query Language)。")]),t._v(" "),a("li",[t._v("SQL的作用：客户端使用SQL来操作服务器。")])]),t._v(" "),a("blockquote",[a("p",[t._v("启动mysql.exe，连接服务器后，就可以使用sql来操作服务器了。\n将来会使用Java程序连接服务器，然后使用sql来操作服务器。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("SQL标准(例如SQL99，即1999年制定的标准)：")])]),t._v(" "),a("blockquote",[a("p",[t._v("由国际标准化组织(ISO)制定的，对DBMS的统一操作方式(例如相同的语句可以操作：mysql、oracle等)。")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("SQL方言")])]),t._v(" "),a("blockquote",[a("p",[t._v("某种DBMS不只会支持SQL标准，而且还会有一些自己独有的语法，这就称之为方言！例如limit语句只在MySQL中可以使用")])]),t._v(" "),a("h3",{attrs:{id:"sql语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql语法"}},[t._v("#")]),t._v(" SQL语法")]),t._v(" "),a("ol",[a("li",[t._v("SQL语句可以在单行或多行书写，以分号结尾")]),t._v(" "),a("li",[t._v("可使用空格和缩进来增强语句的可读性")]),t._v(" "),a("li",[t._v("MySQL不区别大小写，建议使用大写")])]),t._v(" "),a("h3",{attrs:{id:"sql语句分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql语句分类"}},[t._v("#")]),t._v(" SQL语句分类(*****)")]),t._v(" "),a("ol",[a("li",[t._v("DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等；")])]),t._v(" "),a("blockquote",[a("p",[t._v("创建、删除、修改：库、表结构！！！")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("DML（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）；")])]),t._v(" "),a("blockquote",[a("p",[t._v("增、删、改：表记录")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；")]),t._v(" "),a("li",[t._v("DQL*****（Data Query Language）：数据查询语言，用来查询记录（数据）。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("ul",[a("li",[t._v("ddl：数据库或表的结构操作(*****)")]),t._v(" "),a("li",[t._v("dml：对表的记录进行更新（增、删、改）(*****)")]),t._v(" "),a("li",[t._v("dql：对表的记录的查询（*****，难点）")]),t._v(" "),a("li",[t._v("dcl：对用户的创建，及授权！")])])]),t._v(" "),a("h3",{attrs:{id:"ddl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddl"}},[t._v("#")]),t._v(" DDL")]),t._v(" "),a("h4",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),a("ul",[a("li",[t._v("查看所有数据库：SHOW DATABASES")]),t._v(" "),a("li",[t._v("切换（选择要操作的）数据库：USE 数据库名")]),t._v(" "),a("li",[t._v("创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1 [CHARSET=utf8]")]),t._v(" "),a("li",[t._v("删除数据库：DROP DATABASE [IF EXISTS] mydb1")]),t._v(" "),a("li",[t._v("修改数据库编码：ALTER DATABASE mydb1 CHARACTER SET utf8")])]),t._v(" "),a("h4",{attrs:{id:"数据类型-列类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型-列类型"}},[t._v("#")]),t._v(" 数据类型(列类型)")]),t._v(" "),a("ul",[a("li",[t._v("int：整型")]),t._v(" "),a("li",[t._v("double：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；")]),t._v(" "),a("li",[t._v("decimal：浮点型，在表单钱方面使用该类型，因为不会出现精度缺失问题；")]),t._v(" "),a("li",[t._v("char：固定长度字符串类型； char(255)，数据的长度不足指定长度，补足到指定长度！")]),t._v(" "),a("li",[t._v("varchar：可变长度字符串类型； varchar(65535), zhangSan")]),t._v(" "),a("li",[t._v("text(clob)：字符串类型；\n"),a("blockquote",[a("ol",[a("li",[t._v("很小")]),t._v(" "),a("li",[t._v("小")]),t._v(" "),a("li",[t._v("中")]),t._v(" "),a("li",[t._v("大")])])])]),t._v(" "),a("li",[t._v("blob：字节类型；\n"),a("blockquote",[a("ol",[a("li",[t._v("很小")]),t._v(" "),a("li",[t._v("小")]),t._v(" "),a("li",[t._v("中")]),t._v(" "),a("li",[t._v("大")])])])]),t._v(" "),a("li",[t._v("date：日期类型，格式为：yyyy-MM-dd；")]),t._v(" "),a("li",[t._v("time：时间类型，格式为：hh:mm:ss")]),t._v(" "),a("li",[t._v("timestamp：时间戳类型；")])]),t._v(" "),a("h4",{attrs:{id:"表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表"}},[t._v("#")]),t._v(" 表")]),t._v(" "),a("ul",[a("li",[t._v("创建表：\nCREATE TABLE [IF NOT EXISTS] 表名(ITCAST_0001\n列名 列类型,\n列名 列类型,\n...\n列名 列类型\n);")]),t._v(" "),a("li",[t._v("查看当前数据库中所有表名称：SHOW TABLES;")]),t._v(" "),a("li",[t._v("查看指定表的创建语句：SHOW CREATE TABLE 表名(了解);")]),t._v(" "),a("li",[t._v("查看表结构：DESC 表名;")]),t._v(" "),a("li",[t._v("删除表：DROP TABLE 表名;")]),t._v(" "),a("li",[t._v("修改表：前缀：ALTER TABLE 表名\n"),a("blockquote",[a("p",[t._v("修改之添加列：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  列名 列类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  列名 列类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("修改之修改列类型(如果被修改的列已存在数据，那么新的类型可能会影响到已存在数据)")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODIFY")]),t._v(" 列名 列类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("修改之修改列名：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名 CHANGE 原列名 新列名 列类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("修改之删除列：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("修改表名称：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 原表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RENAME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" 新表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  列名 列类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  列名 列类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  列名 列类型\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表名\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("modify")]),t._v(" 列名 列新的类型\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" 新名\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"dql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dql"}},[t._v("#")]),t._v(" DQL")]),t._v(" "),a("p",[t._v("SELECT * FROM 表名")]),t._v(" "),a("h3",{attrs:{id:"dml-数据操作语言，它是对表记录的操作-增、删、改-！"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dml-数据操作语言，它是对表记录的操作-增、删、改-！"}},[t._v("#")]),t._v(" DML(数据操作语言，它是对表记录的操作(增、删、改)！)")]),t._v(" "),a("ol",[a("li",[t._v("插入数据")])]),t._v(" "),a("ul",[a("li",[t._v("INTERT INTO 表名(列名1,列名2, ...) VALUES(列值1, 列值2, ...);\n"),a("blockquote",[a("p",[t._v("在表名后给出要插入的列名，其他没有指定的列等同与插入null值。所以插入记录总是插入一行，不可能是半行。\n在VALUES后给出列值，值的顺序和个数必须与前面指定的列对应")])])]),t._v(" "),a("li",[t._v("INTERT INTO 表名 VALUES(列值1, 列值2)\n"),a("blockquote",[a("p",[t._v("没有给出要插入的列，那么表示插入所有列。\n值的个数必须是该表列的个数。\n值的顺序，必须与表创建时给出的列的顺序相同。")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("修改数据")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("UPDATE 表名 SET 列名1=列值1, 列名2=列值2, ... [WHERE 条件]")])]),t._v(" "),a("li",[a("p",[t._v("条件(条件可选的)：")]),t._v(" "),a("blockquote",[a("p",[t._v("条件必须是一个boolean类型的值或表达式：UPDATE t_person SET gender='男', age=age+1 WHERE sid='1';\n运算符：=、!=、<>、>、<、>=、<=、BETWEEN...AND、IN(...)、IS NULL、NOT、OR、AND")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangSan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'liSi'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangSan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'liSi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 不能使用等号\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n")])])])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("删除数据")])]),t._v(" "),a("ul",[a("li",[t._v("DELETE FROM 表名 [WHERE 条件];")]),t._v(" "),a("li",[t._v("TRUNCATE TABLE 表名：TRUNCATE是DDL语句，它是先删除drop该表，再create该表。而且无法回滚！！！")])]),t._v(" "),a("blockquote",[a("p",[t._v("在数据库中所有的字符串类型，必须使用单引，不能使用双引！日期类型也要使用单引！")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入所有列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gender\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ITCAST_0001'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangSan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'male'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入部分列，没有指定的列默认为NULL值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" VAKLUES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ITCAST_0002'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'liSi'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不给出插入列，那么默认为插入所有列！值的顺序要与创建表时列的顺序相同")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ITCAST_0003'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wangWu'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("82")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'female'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" UPDATE")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("102")]),t._v("\n")])])]),a("h3",{attrs:{id:"dcl-理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dcl-理解"}},[t._v("#")]),t._v(" DCL(理解)")]),t._v(" "),a("ul",[a("li",[t._v("一个项目创建一个用户！一个项目对应的数据库只有一个！")]),t._v(" "),a("li",[t._v("这个用户只能对这个数据库有权限，其他数据库你就操作不了了！")])]),t._v(" "),a("ol",[a("li",[t._v("创建用户")])]),t._v(" "),a("ul",[a("li",[t._v("CREATE USER 用户名@IP地址 IDENTIFIED BY '密码';\n"),a("blockquote",[a("p",[t._v("用户只能在指定的IP地址上登录")])])]),t._v(" "),a("li",[t._v("CREATE USER 用户名@'%' IDENTIFIED BY '密码';\n"),a("blockquote",[a("p",[t._v("用户可以在任意IP地址上登录")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("给用户授权")])]),t._v(" "),a("ul",[a("li",[t._v("GRANT 权限1, … , 权限n ON 数据库.* TO 用户名@IP地址\n"),a("blockquote",[a("p",[t._v("权限、用户、数据库\n给用户分派在指定的数据库上的指定的权限\n例如；GRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON mydb1.* TO user1@localhost;")])]),t._v(" "),a("ul",[a("li",[t._v("给user1用户分派在mydb1数据库上的create、alter、drop、insert、update、delete、select权限")])])]),t._v(" "),a("li",[t._v("GRANT ALL ON 数据库.* TO 用户名@IP地址;\n"),a("blockquote",[a("p",[t._v("给用户分派指定数据库上的所有权限")])])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("撤销授权")])]),t._v(" "),a("ul",[a("li",[t._v("REVOKE 权限1, … , 权限n ON 数据库.* FROM 用户名@IP地址;\n"),a("blockquote",[a("p",[t._v("撤消指定用户在指定数据库上的指定权限\n例如；REVOKE CREATE,ALTER,DROP ON mydb1.* FROM user1@localhost;")])]),t._v(" "),a("ul",[a("li",[t._v("撤消user1用户在mydb1数据库上的create、alter、drop权限")])])])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("查看权限")])]),t._v(" "),a("ul",[a("li",[t._v("SHOW GRANTS FOR 用户名@IP地址\n"),a("blockquote",[a("p",[t._v("查看指定用户的权限")])])])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("删除用户")])]),t._v(" "),a("ul",[a("li",[t._v("DROP USER 用户名@IP地址")])]),t._v(" "),a("h3",{attrs:{id:"dql-数据查询语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dql-数据查询语言"}},[t._v("#")]),t._v(" DQL -- 数据查询语言")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("查询不会修改数据库表记录！")])]),t._v(" "),a("h4",{attrs:{id:"基本查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本查询"}},[t._v("#")]),t._v(" 基本查询")]),t._v(" "),a("ol",[a("li",[t._v("字段(列)控制")])]),t._v(" "),a("ol",[a("li",[t._v("查询所有列")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 其中“*”表示查询所有列")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("查询指定列")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" 列N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comm "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("完全重复的记录只一次")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("当查询结果中的多行记录一模一样时，只显示一行。一般查询所有列时很少会有这种情况，但只查询一列（或几列）时，这总可能就大了！")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" 列N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 保查询员工表的工资，如果存在相同的工资只显示一次！")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("列运算\nI 数量类型的列可以做加、减、乘、除运算")])]),t._v(" "),a("pre",[a("code",[t._v("```sql\nSELECT sal*1.5 FROM emp;\nSELECT sal+comm FROM emp;\n```\n")])]),t._v(" "),a("p",[t._v("II 字符串类型可以做连续运算\n"),a("code",[t._v("sql SELECT CONCAT('$', sal) FROM emp;")])]),t._v(" "),a("p",[t._v("III 转换NULL值\n::: tip 注意\n有时需要把NULL转换成其它值，例如com+1000时，如果com列存在NULL值，那么NULL+1000还是NULL，而我们这时希望把NULL当前0来运算。\n:::\n"),a("code",[t._v("sql SELECT IFNULL(comm, 0)+1000 FROM emp; --\x3e IFNULL(comm, 0)：如果comm中存在NULL值，那么当成0来运算。")])]),t._v(" "),a("p",[t._v("IV 给列起别名")]),t._v(" "),a("pre",[a("code",[t._v("::: tip 注意\n你也许已经注意到了，当使用列运算后，查询出的结果集中的列名称很不好看，这时我们需要给列名起个别名，这样在结果集中列名就显示别名了\n:::\n\n```sql\nSELECT IFNULL(comm, 0)+1000 AS 奖金 FROM emp;\n--\x3e 其中AS可以省略\n```\n")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("条件控制")])]),t._v(" "),a("ol",[a("li",[t._v("条件查询\n与前面介绍的UPDATE和DELETE语句一样，SELECT语句也可以使用WHERE子句来控制记录。")])]),t._v(" "),a("pre",[a("code",[t._v("```sql\n* SELECT empno,ename,sal,comm FROM emp WHERE sal > 10000 AND comm IS NOT NULL;\n* SELECT empno,ename,sal FROM emp WHERE sal BETWEEN 20000 AND 30000;\n* SELECT empno,ename,job FROM emp WHERE job IN ('经理', '董事长');\n```\n")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("模糊查询")])]),t._v(" "),a("pre",[a("code",[t._v("::: tip 注意\n当你想查询姓张，并且姓名一共两个字的员工时，这时就可以使用模糊查询\n:::\n```sql\n* SELECT * FROM emp WHERE ename LIKE '张_';\n--\x3e 模糊查询需要使用运算符：LIKE，其中_匹配一个任意字符，注意，只匹配一个字符而不是多个。\n--\x3e 上面语句查询的是姓张，名字由两个字组成的员工。\n* SELECT * FROM emp WHERE ename LIKE '___'; /*姓名由3个字组成的员工*/\n```\n\n::: tip 注意\n如果我们想查询姓张，名字几个字可以的员工时就要使用“%”了。\n:::\n```sql\nSELECT * FROM emp WHERE ename LIKE '张%';\n--\x3e 其中%匹配0~N个任意字符，所以上面语句查询的是姓张的所有员工。\nSELECT * FROM emp WHERE ename LIKE '%阿%';\n--\x3e 千万不要认为上面语句是在查询姓名中间带有阿字的员工，因为%匹配0~N个字符，所以姓名以阿开头和结尾的员工也都会查询到。\nSELECT * FROM emp WHERE ename LIKE '%';\n--\x3e 这个条件等同与不存在，但如果姓名为NULL的查询不出来！\n```\n")])]),t._v(" "),a("h4",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),a("ol",[a("li",[t._v("升序")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 按sal排序，升序！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 其中ASC是可以省略的")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("降序")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" comm "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 按comm排序，降序！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 其中DESC不能省略")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("使用多列作为排序条件")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comm "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 使用sal升序排，如果sal相同时，使用comm的降序排")]),t._v("\n")])])]),a("h4",{attrs:{id:"聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数"}},[t._v("#")]),t._v(" 聚合函数")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("聚合函数用来做某列的纵向运算。")])]),t._v(" "),a("ol",[a("li",[t._v("COUNT")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 计算emp表中所有列都不为NULL的记录的行数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 云计算emp表中comm列不为NULL的记录的行数")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("MAX")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 查询最高工资")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("MIN")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 查询最低工资")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("SUM")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 查询工资合")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("AVG")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 查询平均工资")]),t._v("\n")])])]),a("h4",{attrs:{id:"分组查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组查询"}},[t._v("#")]),t._v(" 分组查询")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("分组查询是把记录使用某一列进行分组，然后查询组信息。\n例如：查看所有部门的记录数。")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 使用deptno分组，查询部门编号和每个部门的记录数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 使用job分组，查询每种工作的最高工资")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("组条件\n以部门分组，查询每组记录数。条件为记录数大于3")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"limit子句-方言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limit子句-方言"}},[t._v("#")]),t._v(" limit子句(方言)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("LIMIT用来限定查询结果的起始行，以及总行数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("例如：查询起始行为第5行，一共查询3行记录")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e 其中4表示从第5行开始，其中3表示一共查询3行。即第5、6、7行记录。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 一页的记录数："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("行\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 查询第"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("页\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("当前页"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 每页记录数\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("\n")])])]),a("p",[t._v("练习：")]),t._v(" "),a("ol",[a("li",[t._v("查询出部门编号为30的所有员工")]),t._v(" "),a("li",[t._v("所有销售员的姓名、编号和部门编号。")]),t._v(" "),a("li",[t._v("找出奖金高于工资的员工。")]),t._v(" "),a("li",[t._v("找出奖金高于工资60%的员工。")]),t._v(" "),a("li",[t._v("找出部门编号为10中所有经理，和部门编号为20中所有销售员的详细资料。")]),t._v(" "),a("li",[t._v("找出部门编号为10中所有经理，部门编号为20中所有销售员，还有即不是经理又不是销售员但其工资大或等于20000的所有员工详细资料。")]),t._v(" "),a("li",[t._v("无奖金或奖金低于1000的员工。")]),t._v(" "),a("li",[t._v("查询名字由三个字组成的员工。")]),t._v(" "),a("li",[t._v("查询2000年入职的员工。")]),t._v(" "),a("li",[t._v("查询所有员工详细信息，用编号升序排序")]),t._v(" "),a("li",[t._v("查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序")]),t._v(" "),a("li",[t._v("查询每个部门的平均工资")]),t._v(" "),a("li",[t._v("查询每个部门的雇员数量。")]),t._v(" "),a("li",[t._v("查询每种工作的最高工资、最低工资、人数")]),t._v(" "),a("li",[t._v("显示非销售人员工作名称以及从事同一工作雇员的月工资的总和，并且要满足从事同一工作的雇员的月工资合计大于50000，输出结果按月工资的合计升序排列")]),t._v(" "),a("li",[t._v("有奖金的工种。")])]),t._v(" "),a("h3",{attrs:{id:"约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[t._v("#")]),t._v(" 约束")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("约束是添加在列上的，用来约束列的！")])]),t._v(" "),a("h4",{attrs:{id:"主键约束（唯一标识）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键约束（唯一标识）"}},[t._v("#")]),t._v(" 主键约束（唯一标识）")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("ol",[a("li",[t._v("非空")]),t._v(" "),a("li",[t._v("唯一")]),t._v(" "),a("li",[t._v("被引用（学习外键时）")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当表的某一列被指定为主键后，该列就不能为空，不能有重复值出现。")])]),t._v(" "),a("li",[a("p",[t._v("创建表时指定主键的两种方式：")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("第一种")]),t._v(" "),a("p",[t._v("指定sid列为主键列，即为sid列添加主键约束")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  sid\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sname\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  gender\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("第二种")]),t._v(" "),a("p",[t._v("指定sid列为主键列，即为sid列添加主键约束")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  sid\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sname\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  gender\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("修改表时指定主键：")])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("删除主键：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"主键自增长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键自增长"}},[t._v("#")]),t._v(" 主键自增长")]),t._v(" "),a("ul",[a("li",[t._v("因为主键列的特性是：必须唯一、不能为空，所以我们通常会指定主键类为整型，然后设置其自动增长，这样可以保证在插入数据时主键列的唯一和非空特性。")]),t._v(" "),a("li",[t._v("创建表时指定主键自增长")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  \tsid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \tsname\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \tage\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \tgender\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("修改表时设置主键自增长：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu CHANGE sid sid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("修改表时删除主键自增长：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" stu CHANGE sid sid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("测试主键自增长："),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangSan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'male'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangSan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'male'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"非空约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非空约束"}},[t._v("#")]),t._v(" 非空约束")]),t._v(" "),a("ul",[a("li",[t._v("因为某些列不能设置为NULL值，所以可以对列添加非空约束。")]),t._v(" "),a("li",[t._v("例如：\nCREATE TABLE stu(\nsid INT PRIMARY KEY AUTO_INCREMENT,\nsname\tVARCHAR(20) NOT NULL,\nage\t\tINT,\ngender\tVARCHAR(10)\n);")]),t._v(" "),a("li",[t._v("对sname列设置了非空约束")])]),t._v(" "),a("h4",{attrs:{id:"唯一约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#唯一约束"}},[t._v("#")]),t._v(" 唯一约束")]),t._v(" "),a("ul",[a("li",[t._v("车库某些列不能设置重复的值，所以可以对列添加唯一约束。")]),t._v(" "),a("li",[t._v("例如：\nCREATE TABLE stu(\nsid INT PRIMARY KEY AUTO_INCREMENT,\nsname\tVARCHAR(20) NOT NULL UNIQUE,\nage\t\tINT,\ngender\tVARCHAR(10)\n);")]),t._v(" "),a("li",[t._v("对sname列设置了非空约束")])]),t._v(" "),a("h4",{attrs:{id:"概念模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念模型"}},[t._v("#")]),t._v(" 概念模型")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("对象模型：可以双向关联，而且引用的是对象，而不是一个主键！\n关系模型：只能多方引用一方，而且引用的只是主键，而不是一整行记录。")])]),t._v(" "),a("p",[t._v("对象模型：在java中是domain！！！例如：User、Student\nis a\nhas a(关联)")]),t._v(" "),a("blockquote",[a("p",[t._v("1对1\n1对多\n多对多\nuse a")])]),t._v(" "),a("p",[t._v("关系模型：在数据库中表！！！")]),t._v(" "),a("p",[t._v("当我们要完成一个软件系统时，需要把系统中的实体抽取出来，形成概念模型。\n例如部门、员工都是系统中的实体。概念模型中的实体最终会成为Java中的类、数据库中表。\n实体之间还存在着关系，关系有三种：")]),t._v(" "),a("ul",[a("li",[t._v("1对多：例如每个员工都从属一个部门，而一个部门可以有多个员工，其中员工是多方，而部门是一方。")]),t._v(" "),a("li",[t._v("1对1：例如老公和老婆就是一对一的关系，一个老公只能有一个老婆，而一个老婆只能有一个老公。")]),t._v(" "),a("li",[t._v("多对多：老师与学生的关系就是多对多，一个老师可以有多个学生，一个学生可以有多个老师。")])]),t._v(" "),a("p",[t._v("概念模型在Java中成为实体类（javaBean）\n类就使用成员变量来完成关系，一般都是双向关联！\n多对一双向中关联，即员工关联部门，部门也关联员工")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多方关联一方")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" Department department"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Department")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一方关联多方")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Employee"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Husband")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" Wife wife"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wife")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" Husband\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Teacher"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" teachers\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Teacher")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Student"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"外键约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外键约束"}},[t._v("#")]),t._v(" 外键约束")]),t._v(" "),a("ul",[a("li",[t._v("外键必须是另一表的主键的值(外键要引用主键！)")]),t._v(" "),a("li",[t._v("外键可以重复")]),t._v(" "),a("li",[t._v("外键可以为空")]),t._v(" "),a("li",[t._v("一张表中可以有多个外键！")])]),t._v(" "),a("p",[t._v("概念模型在数据库中成为表\n数据库表中的多对一关系，只需要在多方使用一个独立的列来引用1方的主键即可\n/"),a("em",[t._v("员工表")]),t._v("/\ncreate talbe emp (\nempno int primary key,/"),a("em",[t._v("员工编号")]),t._v("/\n...\ndeptno int/"),a("em",[t._v("所属部门的编号")]),t._v("/\n);\n/"),a("em",[t._v("部门表")]),t._v("/\ncreate table dept (\ndeptno int  primary key,/"),a("em",[t._v("部门编号")]),t._v("/\n...\n);\nemp表中的deptno列的值表示当前员工所从属的部门编号。也就是说emp.deptno必须在dept表中是真实存在！\n但是我们必须要去对它进行约束，不然可能会出现员工所属的部门编号是不存在的。这种约束就是外键约束。\n我们需要给emp.deptno添加外键约束，约束它的值必须在dept.deptno中存在。外键必须是另一个表的主键！")]),t._v(" "),a("p",[t._v("语法：CONSTRAINT 约束名称 FOREIGN KEY(外键列名) REFERENCES 关联表(关联表的主键)\n创建表时指定外键约束\ncreate talbe emp (\nempno int primary key,\n...\ndeptno int,\nCONSTRAINT fk_emp FOREIGN KEY(mgr) REFERENCES emp(empno)\n);")]),t._v(" "),a("p",[t._v("修改表时添加外键约束\nALERT TABLE emp\nADD CONSTRAINT fk_emp_deptno FOREIGN KEY(deptno) REFERENCES dept(deptno);")]),t._v(" "),a("p",[t._v("修改表时删除外键约束\nALTER TABLE emp\nDROP FOREIGN KEY fk_emp_deptno;/"),a("em",[t._v("约束名称")]),t._v("/")]),t._v(" "),a("h4",{attrs:{id:"数据库一对一关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库一对一关系"}},[t._v("#")]),t._v(" 数据库一对一关系")]),t._v(" "),a("p",[t._v("在表中建立一对一关系比较特殊，需要让其中一张表的主键，即是主键又是外键。\ncreate table husband(\nhid int PRIMARY KEY,\n...\n);\ncreate table wife(\nwid int PRIMARY KEY,\n...\nADD CONSTRAINT fk_wife_wid FOREIGN KEY(wid) REFERENCES husband(hid)\n);\n其中wife表的wid即是主键，又是相对husband表的外键！\nhusband.hid是主键，不能重复！\nwife.wid是主键，不能重复，又是外键，必须来自husband.hid。\n所以如果在wife表中有一条记录的wid为1，那么wife表中的其他记录的wid就不能再是1了，因为它是主键。\n同时在husband.hid中必须存在1这个值，因为wid是外键。这就完成了一对一关系。")]),t._v(" "),a("p",[t._v("*****从表的主键即是外键！")]),t._v(" "),a("h4",{attrs:{id:"数据库多对多关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库多对多关系"}},[t._v("#")]),t._v(" 数据库多对多关系")]),t._v(" "),a("p",[t._v("在表中建立多对多关系需要使用中间表，即需要三张表，在中间表中使用两个外键，分别引用其他两个表的主键。\ncreate table student(\nsid int PRIMARY KEY,\n...\n);\ncreate table teacher(\ntid int PRIMARY KEY,\n...\n);")]),t._v(" "),a("p",[t._v("create table stu_tea(\nsid int,\ntid int,\nADD CONSTRAINT fk_stu_tea_sid FOREIGN KEY(sid) REFERENCES student(sid),\nADD CONSTRAINT fk_stu_tea_tid FOREIGN KEY(tid) REFERENCES teacher(tid)\n);\n这时在stu_tea这个中间表中的每条记录都是来说明student和teacher表的关系\n例如在stu_tea表中的记录：sid为1001，tid为2001，这说明编号为1001的学生有一个编号为2001的老师\nsid    tid\n101    201 /"),a("em",[t._v("编号为101的学生有一个编号为201的老师")]),t._v("/\n101    202 /"),a("em",[t._v("编号为101的学生有一个编号为202的老师")]),t._v("/\n101    203 /"),a("em",[t._v("编号为101的学生有一个编号为203的老师")]),t._v("/\n102    201 /"),a("em",[t._v("编号为102的学生有一个编号为201的老师")]),t._v("/\n102    204 /"),a("em",[t._v("编号为102的学生有一个编号为204的老师")]),t._v("/")]),t._v(" "),a("h3",{attrs:{id:"编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[t._v("#")]),t._v(" 编码")]),t._v(" "),a("ol",[a("li",[t._v("查看MySQL数据库编码")])]),t._v(" "),a("ul",[a("li",[t._v("SHOW VARIABLES LIKE 'char%';")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("编码解释")])]),t._v(" "),a("ul",[a("li",[t._v("character_set_client：MySQL使用该编码来解读客户端发送过来的数据，例如该编码为UTF8，那么如果客户端发送过来的数据不是UTF8，那么就会出现乱码")]),t._v(" "),a("li",[t._v("character_set_results：MySQL会把数据转换成该编码后，再发送给客户端，例如该编码为UTF8，那么如果客户端不使用UTF8来解读，那么就会出现乱码\n其它编码只要支持中文即可，也就是说不能使用latin1")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("控制台乱码问题")])]),t._v(" "),a("ul",[a("li",[t._v("插入或修改时出现乱码：\n"),a("blockquote",[a("p",[t._v("这时因为cmd下默认使用GBK，而character_set_client不是GBK的原因。我们只需让这两个编码相同即可。\n因为修改cmd的编码不方便，所以我们去设置character_set_client为GBK即可。")])])]),t._v(" "),a("li",[t._v("查询出的数据为乱码：\n"),a("blockquote",[a("p",[t._v("这是因为character_set_results不是GBK，而cmd默认使用GBK的原因。我们只需让这两个编码相同即可。\n因为修改cmd的编码不方便，所以我们去设置character_set_results为GBK即可。")])])]),t._v(" "),a("li",[t._v("设置变量的语句：\n"),a("blockquote",[a("p",[t._v("set character_set_client=gbk;\nset character_set_results=gbk;")])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("设置变量只对当前连接有效，当退出窗口后，再次登录mysql，还需要再次设置变量。为了一劳永逸，可以在my.ini中设置：设置default-character-set=gbk即可。")])]),t._v(" "),a("p",[t._v("4. 指定默认编码\n我们在安装MySQL时已经指定了默认编码为UTF8，所以我们在创建数据库、创建表时，都无需再次指定编码。\n为了一劳永逸，可以在my.ini中设置：\n设置character-set-server=utf8即可。")]),t._v(" "),a("p",[t._v("character_set_client     | utf8 --\x3e mysql把我们客户端传递的数据都当成是utf8！一是给它传递utf8，二是如果我们传递的是gbk，那么需要修改这个变量为gbk\ncharacter_set_connection | utf8\ncharacter_set_database   | utf8\ncharacter_set_results    | utf8 --\x3e mysql发送给客户端的数据都是utf8的。一是客户端用utf8编码，二是如果客户端使用gbk来编码，那么需要修改这个变量为gbk的。\ncharacter_set_server     | utf8\ncharacter_set_system     | utf8")]),t._v(" "),a("p",[t._v("character_set_client=utf8，无论客户端发送的是什么编码的数据，mysql都当成是utf8的数据！")]),t._v(" "),a("blockquote",[a("p",[t._v("若客户端发送的是GBK\n服务器会当成utf8对待\n总结：必然乱码！")])]),t._v(" "),a("p",[t._v("处理问题的手段有两种；")]),t._v(" "),a("blockquote",[a("p",[t._v("让客户端发送utf8的数据(行不通)\n把character_set_client修改为gbk\nset character_set_client=gbk; --\x3e 只在当前窗口内有效，也就是说，关闭窗口后，再打开，又回到utf8了。")])]),t._v(" "),a("p",[t._v("character_set_results=utf8，把数据用什么编码发送给客户端！")]),t._v(" "),a("blockquote",[a("p",[t._v("若服务器发送给客户端的是utf8的数据\n客户端会把它当成gbk，因为我们的小黑屏，只能显示gbk\n总结：必然乱码！")])]),t._v(" "),a("p",[t._v("处理问题的手段有两种：")]),t._v(" "),a("blockquote",[a("p",[t._v("让服务器发送gbk的数据：set character_set_results=gbk\n让小黑屏使用utf8来解读（行不通）")])]),t._v(" "),a("p",[t._v("my.ini\n在总配置文件中进行配置，可以一劳永逸")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("配置")]),t._v(" "),a("p",[t._v("[client]\nport=3306\n[mysql]\ndefault-character-set=gbk /"),a("em",[t._v("它可以一劳永逸！它可以修改三个变量：client、results、connection")]),t._v("/")])]),t._v(" "),a("h3",{attrs:{id:"备份与恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份与恢复"}},[t._v("#")]),t._v(" 备份与恢复")]),t._v(" "),a("blockquote",[a("p",[t._v("数据库 --\x3e sql语句\nsql语句 --\x3e 数据库")])]),t._v(" "),a("ol",[a("li",[t._v("数据库导出SQL脚本(备份数据库内容，并不是备份数据库！)")])]),t._v(" "),a("blockquote",[a("p",[t._v("mysqldump –u用户名 –p密码 数据库名>生成的脚本文件路径\n例如：mysqldump -uroot -p123 mydb1>C:\\mydb1.sql  (与mysql.exe和mysqld.exe一样, 都在bin目录下)\n注意，不要打分号，不要登录mysql，直接在cmd下运行\n注意，生成的脚本文件中不包含create database语句")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("执行SQL脚本\n第一种方式\n"),a("blockquote",[a("p",[t._v("mysql -u用户名 -p密码 数据库<脚本文件路径\n例如：")])]),t._v(" "),a("ul",[a("li",[t._v("先删除mydb1库，再重新创建mydb1库")]),t._v(" "),a("li",[t._v("mysql -uroot -p123 mydb1<C:\\mydb1.sql")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意，不要打分号，不要登录mysql，直接在cmd下运行")])])])]),t._v(" "),a("p",[t._v("第二种方式\n> 登录mysql\n> source SQL脚本路径\n> 例如：\n* 先删除mydb1库，再重新创建mydb1库\n* 切换到mydb1库\n* source c:\\mydb1.sql")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("数据库 --\x3e sql：备份\nsql --\x3e 数据库：恢复")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("mysqldump -uroot -p123 mydb3>c:/a.sql --\x3e  备份\nmysql -uroot -p123 mydb3<c:/a.sql --\x3e 恢复\nsource c:/a.sql --\x3e 恢复")]),t._v(" "),a("p",[t._v("select *\nfrom emp, dept, (select * from emp)\nwhere\ngroup by\nhaving\norder by\nlimit")]),t._v(" "),a("h3",{attrs:{id:"多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[t._v("#")]),t._v(" 多表查询")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("分类")]),t._v(" "),a("p",[t._v("分类：")]),t._v(" "),a("ul",[a("li",[t._v("合并结果集(了解)")]),t._v(" "),a("li",[t._v("连接查询")]),t._v(" "),a("li",[t._v("子查询")])])]),t._v(" "),a("h4",{attrs:{id:"合并结果集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并结果集"}},[t._v("#")]),t._v(" 合并结果集")]),t._v(" "),a("ul",[a("li",[t._v("要求被合并的表中，列的类型和列数相同")]),t._v(" "),a("li",[t._v("UNION，去除重复行")]),t._v(" "),a("li",[t._v("UNION ALL，不去除重复行")])]),t._v(" "),a("p",[t._v("SELECT * FROM cd\nUNION ALL\nSELECT * FROM ab;")]),t._v(" "),a("h4",{attrs:{id:"连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接查询"}},[t._v("#")]),t._v(" 连接查询")]),t._v(" "),a("ol",[a("li",[t._v("分类")])]),t._v(" "),a("pre",[a("code",[t._v("* 内连接\n* 外连接\n  > 左外连接\n  > 右外连接\n  > 全外连接(MySQL不支持)\n* 自然连接（属于一种简化方式）\n")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("内连接")])]),t._v(" "),a("pre",[a("code",[t._v("* 方言：SELECT * FROM 表1 别名1, 表2 别名2 WHERE 别名1.xx=别名2.xx\n* 标准：SELECT * FROM 表1 别名1 INNER JOIN 表2 别名2 ON 别名1.xx=别名2.xx\n* 自然：SELECT * FROM 表1 别名1 NATURAL JOIN 表2 别名2\n* 内连接查询出的所有记录都满足条件。\n")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("外连接")])]),t._v(" "),a("pre",[a("code",[t._v("* 左外：SELECT * FROM 表1 别名1 LEFT OUTER JOIN 表2 别名2 ON 别名1.xx=别名2.xx\n  > 左表记录无论是否满足条件都会查询出来，而右表只有满足条件才能出来。左表中不满足条件的记录，右表部分都为NULL\n* 左外自然：SELECT * FROM 表1 别名1 NATURAL LEFT OUTER JOIN 表2 别名2 ON 别名1.xx=别名2.xx\n* 右外：SELECT * FROM 表1 别名1 RIGHT OUTER JOIN 表2 别名2 ON 别名1.xx=别名2.xx\n  > 右表记录无论是否满足条件都会查询出来，而左表只有满足条件才能出来。右表不满足条件的记录，其左表部分都为NULL\n* 右外自然：SELECT * FROM 表1 别名1 NATURAL RIGHT OUTER JOIN 表2 别名2 ON 别名1.xx=别名2.xx\n* 全链接：可以使用UNION来完成全链接\n")])]),t._v(" "),a("h4",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[t._v("#")]),t._v(" 子查询")]),t._v(" "),a("p",[t._v("：查询中有查询（查看select关键字的个数！）")]),t._v(" "),a("ol",[a("li",[t._v("出现的位置：")])]),t._v(" "),a("pre",[a("code",[t._v("* where后作为条件存在\n* from后作为表存在(多行多列)\n")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("条件")])]),t._v(" "),a("pre",[a("code",[t._v("* (***)单行单列：SELECT * FROM 表1 别名1 WHERE 列1 [=、>、<、>=、<=、!=] (SELECT 列 FROM 表2 别名2 WHERE 条件)\n* (**)多行单列：SELECT * FROM 表1 别名1 WHERE 列1 [IN, ALL, ANY] (SELECT 列 FROM 表2 别名2 WHERE 条件)\n* (*)单行多列：SELECT * FROM 表1 别名1 WHERE (列1,列2) IN (SELECT 列1, 列2 FROM 表2 别名2 WHERE 条件)\n* (***)多行多列：SELECT * FROM 表1 别名1 , (SELECT ....) 别名2 WHERE 条件\n")])]),t._v(" "),a("p",[t._v("====================================================")]),t._v(" "),a("p",[t._v("笛卡尔积\n{a, b, c} {1,2}\n{a1, a2, b1, b2, c1, c2}")]),t._v(" "),a("p",[t._v("====================================================")]),t._v(" "),a("ol",[a("li",[t._v("查出至少有一个员工的部门。显示部门编号、部门名称、部门位置、部门人数。")]),t._v(" "),a("li",[t._v("列出薪金比关羽高的所有员工。")]),t._v(" "),a("li",[t._v("列出所有员工的姓名及其直接上级的姓名。")]),t._v(" "),a("li",[t._v("列出受雇日期早于直接上级的所有员工的编号、姓名、部门名称。")]),t._v(" "),a("li",[t._v("列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门。")]),t._v(" "),a("li",[t._v("列出所有文员的姓名及其部门名称，部门的人数。")]),t._v(" "),a("li",[t._v("列出最低薪金大于15000的各种工作及从事此工作的员工人数。")]),t._v(" "),a("li",[t._v("列出在销售部工作的员工的姓名，假定不知道销售部的部门编号。")]),t._v(" "),a("li",[t._v("列出薪金高于公司平均薪金的所有员工信息，所在部门名称，上级领导，工资等级。")]),t._v(" "),a("li",[t._v("列出与庞统从事相同工作的所有员工及部门名称。")]),t._v(" "),a("li",[t._v("列出薪金高于在部门30工作的所有员工的薪金的员工姓名和薪金、部门名称。")]),t._v(" "),a("li",[t._v("列出每个部门的员工数量、平均工资。")]),t._v(" "),a("li",[t._v("查出年份、利润、年度增长比")])]),t._v(" "),a("comment-comment")],1)}),[],!1,null,null,null);s.default=n.exports}}]);