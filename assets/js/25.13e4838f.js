(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{243:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("使用vue-cli3创建项目，增加TypeScript")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" (*) Babel\n (*) TypeScript\n ( ) Progressive Web App (PWA) Support\n (*) Router\n (*) Vuex\n (*) CSS Pre-processors\n (*) Linter / Formatter\n")])])]),n("blockquote",[n("p",[e._v("使用less和tslint即可")])]),e._v(" "),n("p",[e._v("这里你会看到和普通生成js的项目有些不同")]),e._v(" "),n("ol",[n("li",[e._v("shims-tsx.d.ts，允许你以.tsx结尾的文件，在Vue项目中编写jsx代码")]),e._v(" "),n("li",[e._v("shims-vue.d.ts TypeScript识别.vue 文件")])]),e._v(" "),n("h3",{attrs:{id:"一-更新ts路由文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-更新ts路由文件"}},[e._v("#")]),e._v(" 一.更新ts路由文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue';\nimport Router from 'vue-router';\nimport Todo from './views/Todo.vue';\nVue.use(Router);export default new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: [\n    {\n      path: '/',\n      name: 'todo',\n      component: Todo, // 访问/ 的时候显示todo组件\n    },\n    {\n      path: '/list', \n      name: 'list', // 访问/list时显示 列表组件\n      component: () => import(/* webpackChunkName: \"List\" */ './views/List.vue'),\n    },\n  ],});\n")])])]),n("h3",{attrs:{id:"二-在components下新增todo-vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-在components下新增todo-vue"}},[e._v("#")]),e._v(" 二.在components下新增Todo.vue")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n    <ul>\n      <li v-for="(item,index) in lists" :key="index">\n        <span v-if="currentIndex !== index">{{item.text}}</span>\n        <input type="text" v-else />\n      </li>\n    </ul>\n  </div>\n  </template>\n  <script lang="ts">\n  // Component来注册组件\n  import { Component, Vue } from "vue-property-decorator";\n@Component\nexport default class Todo extends Vue {\n  public currentIndex = -1;\n  public lists = [ // 声明数据列表\n    {\n      text: "睡觉 呼呼~~~",\n      complete: false\n    },\n    {\n      text: "玩游戏 呼呼~~~",\n      complete: false\n    }\n  ];}\n<\/script>\n')])])]),n("h3",{attrs:{id:"三-jsx编写todo-item组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-jsx编写todo-item组件"}},[e._v("#")]),e._v(" 三.JSX编写todo-item组件")]),e._v(" "),n("h4",{attrs:{id:"属性传递-prop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性传递-prop"}},[e._v("#")]),e._v(" 属性传递(@Prop)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Component, Prop, Vue } from 'vue-property-decorator';\ninterface Item {\n  text: string;\n  complete: boolean;\n}\n@Component\nexport default class TodoItem extends Vue {\n  // 属性校验\n  @Prop(Object) public item!: Item; // 循环的每一项\n  @Prop(Number) public index!: number; // 当前循环的索引\n  @Prop(Number) public currentIndex!: number; // 默认哪一项是当前编辑状态\n  public render() { // 组件需要拥有render方法\n    return <div>\n      {this.index !== this.currentIndex ? <span>{this.item.text}</span> : <input />}\n    </div>;\n  }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 在Todo中引入TodoItem组件\n<li v-for="(item,index) in lists" :key="index">\n    <TodoItem :item="item" :index="index" :currentIndex="currentIndex"></TodoItem></li>\n')])])]),n("h3",{attrs:{id:"四-引入elementui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-引入elementui"}},[e._v("#")]),e._v(" 四.引入elementUI")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在main.js中引入elementUI\nimport ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';\nVue.use(ElementUI);\n")])])]),n("h3",{attrs:{id:"五-使用elementui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-使用elementui"}},[e._v("#")]),e._v(" 五.使用elementUI")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public editingContent = ''; // 编辑的值\n  public handleChange(value: string) {\n    this.editingContent = value;\n  }\n  protected render() {\n    return <li>\n      {this.index === this.currentIndex ?\n        <div>\n          <el-input value={this.editingContent} size='small' on-input={this.handleChange} style={{ width: '200px' }}></el-input>\n          <el-button type='primary' size='small'  icon='el-icon-check'></el-button>\n          <el-button type='danger' size='small' icon='el-icon-close'></el-button>\n        </div>\n        : <div>\n          <span class='content'>{this.item.text}</span>\n          <el-button type='default' size='small' icon='el-icon-edit'></el-button>\n        </div>\n      }\n    </li >;\n  } \n")])])]),n("h3",{attrs:{id:"六-组件间通信-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-组件间通信-emit"}},[e._v("#")]),e._v(" 六.组件间通信(@Emit)")]),e._v(" "),n("h4",{attrs:{id:"实现编辑功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现编辑功能"}},[e._v("#")]),e._v(" 实现编辑功能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<TodoItem\n  v-for="(item,index) in lists"\n  :key="index"\n  :item="item"\n  :index="index"\n  :currentIndex="currentIndex"\n  @edit="edit" // 像子组件传递edit事件>\n</TodoItem>\n  public edit(index: number) {\n    this.currentIndex = index;}\n')])])]),n("p",[e._v("子组件触发父组件的方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public edit() {\n    this.$emit('edit', this.index);}<el-button type='primary' size='small' icon='el-icon-edit' on-click={this.edit}></el-button>\n")])])]),n("p",[e._v("可以使用装饰器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Component, Prop, Vue, Emit } from 'vue-property-decorator';\n@Emit('edit') // 如果发射的事件名和方法名相同，则可以省略\npublic edit() {\n  return this.index; // 返回的结果或作为向上传递的内容\n}\n")])])]),n("h4",{attrs:{id:"实现保存功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现保存功能"}},[e._v("#")]),e._v(" 实现保存功能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<TodoItem\n   v-for="(item,index) in lists"\n  :key="index"\n  :item="item"\n  :index="index"\n  :currentIndex="currentIndex"\n  @edit="edit"\n  @save="save"\n  @close="close"></TodoItem>\n')])])]),n("p",[e._v("将save方法传递给子组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public save({index,content}:{index:number,content:string}){\n    this.lists[index].text = content;\n    this.close();\n}\npublic close() {\n  this.currentIndex = -1;\n}\n")])])]),n("p",[e._v("子组件调用save方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Emit()\npublic save() {\n  return {\n    index: this.index,\n    content: this.editingContent\n  }\n}\n<el-button type='primary' on-click={this.save} size='small' icon='el-icon-check'></el-button>\n")])])]),n("h3",{attrs:{id:"七-数据的监控-watch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-数据的监控-watch"}},[e._v("#")]),e._v(" 七.数据的监控(@Watch)")]),e._v(" "),n("p",[e._v("这里我们可以监控索引的变化")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Component, Prop, Vue, Emit, Watch } from 'vue-property-decorator';\n@Watch('currentIndex')\npublic changeIndex() { // 索引变化讲内容赋予给当前编辑的内容\n    this.editingContent = this.item.text;\n}\n")])])]),n("h3",{attrs:{id:"八-将数据迁移至vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八-将数据迁移至vuex"}},[e._v("#")]),e._v(" 八.将数据迁移至vuex")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue';import Vuex from 'vuex';\nVue.use(Vuex);export default new Vuex.Store({\n  state: {\n    list: [\n      {\n        text: '睡觉 呼呼~~~',\n        complete: false,\n      },\n      {\n        text: '玩游戏 呼呼~~~',\n        complete: false,\n      },\n    ],\n  },\n  mutations: {\n    updateList(state, { index, content }) {\n      state.lists[index].text = content;\n    }\n  },});\n")])])]),n("h4",{attrs:{id:"安装vuex-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装vuex-class"}},[e._v("#")]),e._v(" 安装vuex-class")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i vuex-class\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import { State, Mutation } from "vuex-class";\n@State("lists") public lists!: Item[];\n@Mutation("updateList")\npublic updateList!: (obj: IChangeItem) => void;public save(item: IChangeItem) {\n    this.updateList(item); // 通过mutation更新状态\n    this.close();\n}\n')])])]),e._v(" "),n("comment-comment")],1)}),[],!1,null,null,null);t.default=a.exports}}]);