(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{242:function(t,a,e){"use strict";e.r(a);var n=e(0),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"快速原型开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速原型开发"}},[t._v("#")]),t._v(" 快速原型开发")]),t._v(" "),e("p",[t._v("可以快速识别.vue文件封装组件插件等功能")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo npm install @vue/cli -g\nsudo npm install -g @vue/cli-service-global\nvue serve App.vue\n")])])]),e("h4",{attrs:{id:"_1-props传递数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-props传递数据"}},[t._v("#")]),t._v(" 1.Props传递数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("components\n   ├── Grandson1.vue // 孙子1\n   ├── Grandson2.vue // 孙子2\n   ├── Parent.vue   // 父亲\n   ├── Son1.vue     // 儿子1\n   └── Son2.vue     // 儿子2\n")])])]),e("p",[t._v("在父组件中使用儿子组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n<template>\n     <div>\n          父组件:{{mny}}\n          <Son1 :mny="mny"></Son1>\n     </div>\n </template>\n <script>\n import Son1 from "./Son1";\n export default {\n     components: {\n        Son1\n     },\n     data() {\n        return { mny: 100 };\n     }\n };\n <\/script>\n')])])]),e("p",[t._v("子组件接受父组件的属性")]),t._v(" "),e("h4",{attrs:{id:"_2-emit使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-emit使用"}},[t._v("#")]),t._v(" 2.$emit使用")]),t._v(" "),e("p",[t._v("子组件触发父组件方法,通过回调的方式将修改的内容传递给父组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n<template>\n <div>\n  父组件:{{mny}}\n  <Son1 :mny="mny" @input="change"></Son1>\n </div>\n </template>\n <script>import Son1 from "./Son1";\n export default {\n methods: {\n  change(mny) {\n   this.mny = mny;\n  }\n },\n components: {\n  Son1\n },\n data() {\n  return { mny: 100 };\n }};\n <\/script>\n')])])]),e("p",[t._v("子组件触发绑定自己身上的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n <div>\n  子组件1: {{mny}}\n  <button @click=\"$emit('input',200)\">更改</button>\n </div>\n </template>\n <script>\n export default {\n props: {\n  mny: {\n   type: Number\n  }\n }};\n <\/script>\n")])])]),e("blockquote",[e("p",[t._v("这里的主要目的就是同步父子组件的数据,->语法糖的写法")])]),t._v(" "),e("h5",{attrs:{id:"sync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sync"}},[t._v("#")]),t._v(" .sync")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Son1 :mny.sync="mny"></Son1>\x3c!-- 触发的事件名 update:(绑定.sync属性的名字) --\x3e<button @click="$emit(\'update:mny\',200)">更改</button>\n')])])]),e("h5",{attrs:{id:"v-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model"}},[t._v("#")]),t._v(" v-model")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Son1 v-model="mny"></Son1><template>\n <div>\n  子组件1: {{value}} // 触发的事件只能是input\n  <button @click="$emit(\'input\',200)">更改</button>\n </div>\n </template>\n <script>\n export default {\n props: {\n  value: { // 接收到的属性名只能叫value\n   type: Number\n  }\n }};\n <\/script>\n')])])]),e("h4",{attrs:{id:"_3-parent、-children"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-parent、-children"}},[t._v("#")]),t._v(" 3.$parent、$children")]),t._v(" "),e("p",[t._v("继续将属性传递")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Grandson1 :value="value"></Grandson1><template>\n <div>\n  孙子:{{value}}\n  \x3c!-- 调用父组件的input事件 --\x3e\n  <button @click="$parent.$emit(\'input\',200)">更改</button>\n </div></template>\n <script>\n export default {\n props: {\n  value: {\n   type: Number\n  }\n }};\n <\/script>\n')])])]),e("blockquote",[e("p",[t._v("如果层级很深那么就会出现$parent.$parent.....我们可以封装一个$dispatch方法向上进行派发#$dispatch、")])]),t._v(" "),e("h5",{attrs:{id:"dispatch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dispatch"}},[t._v("#")]),t._v(" $dispatch")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.prototype.$dispatch = function $dispatch(eventName, data) {\n  let parent = this.$parent;\n  while (parent) {\n    parent.$emit(eventName, data);\n    parent = parent.$parent;\n  }};\n")])])]),e("p",[t._v("既然能向上派发那同样可以向下进行派发")]),t._v(" "),e("h5",{attrs:{id:"broadcast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#broadcast"}},[t._v("#")]),t._v(" $broadcast")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.prototype.$broadcast = function $broadcast(eventName, data) {\n  const broadcast = function () {\n    this.$children.forEach((child) => {\n      child.$emit(eventName, data);\n      if (child.$children) {\n        $broadcast.call(child, eventName, data);\n      }\n    });\n  };\n  broadcast.call(this, eventName, data);};\n")])])]),e("h4",{attrs:{id:"_4-attrs、-listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-attrs、-listeners"}},[t._v("#")]),t._v(" 4.$attrs、$listeners")]),t._v(" "),e("h5",{attrs:{id:"attrs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attrs"}},[t._v("#")]),t._v(" $attrs")]),t._v(" "),e("p",[t._v("批量向下传入属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Son2 name="小珠峰" age="10"></Son2>\n\n\x3c!-- 可以在son2组件中使用$attrs属性,可以将属性继续向下传递 --\x3e<div>\n  儿子2: {{$attrs.name}}\n  <Grandson2 v-bind="$attrs"></Grandson2></div>\n\n\n<template>\n <div>孙子:{{$attrs}}</div></template>\n')])])]),e("h5",{attrs:{id:"listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listeners"}},[t._v("#")]),t._v(" $listeners")]),t._v(" "),e("p",[t._v("批量向下传入方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Son2 name="小珠峰" age="10" @click="()=>{this.mny = 500}"></Son2>\x3c!-- 可以在son2组件中使用listeners属性,可以将方法继续向下传递 --\x3e<Grandson2 v-bind="$attrs" v-on="$listeners"></Grandson2>\n\n<button @click="$listeners.click()">更改</button>\n')])])]),e("h4",{attrs:{id:"_5-provide-inject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-provide-inject"}},[t._v("#")]),t._v(" 5.Provide & Inject")]),t._v(" "),e("h5",{attrs:{id:"provide"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provide"}},[t._v("#")]),t._v(" Provide")]),t._v(" "),e("p",[t._v("在父级中注入数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('provide() {\n  return { parentMsg: "父亲" };},\n')])])]),e("h5",{attrs:{id:"inject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inject"}},[t._v("#")]),t._v(" Inject")]),t._v(" "),e("p",[t._v("在任意子组件中可以注入父级数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('inject: ["parentMsg"] // 会将数据挂载在当前实例上\n')])])]),e("h4",{attrs:{id:"_6-ref使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-ref使用"}},[t._v("#")]),t._v(" 6.Ref使用")]),t._v(" "),e("p",[t._v("获取组件实例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Grandson2 v-bind="$attrs" v-on="$listeners" ref="grand2"></Grandson2>\nmounted() { // 获取组件定义的属性\n  console.log(this.$refs.grand2.name);\n}\n')])])]),e("h4",{attrs:{id:"_7-eventbus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-eventbus"}},[t._v("#")]),t._v(" 7.EventBus")]),t._v(" "),e("p",[t._v("用于跨组件通知(不复杂的项目可以使用这种方式)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.prototype.$bus = new Vue();\n")])])]),e("p",[t._v("Son2组件和Grandson1相互通信")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' mounted() {\n  this.$bus.$on("my", data => {\n   console.log(data);\n  });\n },\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('mounted() {\n  this.$nextTick(() => {\n   this.$bus.$emit("my", "我是Grandson1");\n  });\n },\n')])])]),e("h4",{attrs:{id:"_8-vuex通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-vuex通信"}},[t._v("#")]),t._v(" 8.Vuex通信")]),t._v(" "),e("p",[t._v("状态管理")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://vuex.vuejs.org/vuex.png",alt:"vuex",title:"vuex"}})]),t._v(" "),e("comment-comment")],1)}),[],!1,null,null,null);a.default=s.exports}}]);