(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{223:function(e,n,t){"use strict";t.r(n);var l=t(0),i=Object(l.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("场景：利用element-ui开发后台管理系统时,列表页面头部一般都有一个搜索的form,基本上每个列表页面都有，为了降低代码的重复率，那我们可以封装一个search-form组件")])]),e._v(" "),t("h3",{attrs:{id:"search-form组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#search-form组件"}},[e._v("#")]),e._v(" search-form组件")]),e._v(" "),t("p",[e._v("在components 中新建一个Form文件夹，在新建一个searchForm 组件用来放代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<template>\n  <el-form\n    :inline="true"\n    :model="value"\n    label-position="right"\n    :label-width="formConfig.labelWidth"\n    size="small"\n  >\n    <slot name="formItem" />\n    <el-form-item\n      v-for="(item, ind) in formConfig.formItemList"\n      :key="ind + \' \'"\n      :label="`${item.label} ${isColonFn(item)}`"\n      :prop="item.prop"\n    >\n      <el-input\n        v-if="item.type==\'input\'"\n        v-model="value[item.prop]"\n        :disabled="item.disabled"\n        :placeholder="item.placeholder"\n      ></el-input>\n      <el-select\n        v-else-if="item.type==\'select\'"\n        v-model="value[item.prop]"\n        :disabled="item.disabled"\n        :placeholder="item.placeholder"\n      >\n        <el-option\n          v-for="(optItem, index) in item.optList"\n          :key="index"\n          :label="optItem.label"\n          :value="optItem.value"\n        ></el-option>\n      </el-select>\n      <el-radio-group\n        v-model="value[item.prop]"\n        v-else-if="item.type==\'radio\'"\n        :disabled="item.disabled"\n      >\n        <el-radio\n          v-for="(radio, lis) in item.radiotList"\n          :label="radio.value"\n          :key="lis"\n        >{{radio.name}}</el-radio>\n      </el-radio-group>\n      <el-cascader\n        v-model="value[item.prop]"\n        v-else-if="item.type==\'cascader\'"\n        :options="item.options"\n        @change="item.handleChange"\n      ></el-cascader>\n      <el-time-picker\n        v-else-if="item.type==\'timePicker\'"\n        :arrow-control="item.arrowControl"\n        v-model="value[item.prop]"\n        :picker-options="item.pickerOptions"\n        :placeholder="item.placeholder"\n      ></el-time-picker>\n      <el-date-picker\n        :value-format="item.dateFormate"\n        v-else\n        :clearable="false"\n        v-model="value[item.prop]"\n        :type="item.type"\n        :disabled="item.disabled"\n        :placeholder="item.label"\n      ></el-date-picker>\n    </el-form-item>\n    <el-form-item v-for="(item, index) in formConfig.operate" :key="index">\n      <el-button\n        size="small"\n        :type="item.type"\n        :icon="item.icon"\n        @click="item.handleClick"\n      >{{item.name}}</el-button>\n    </el-form-item>\n  </el-form>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {};\n  },\n  props: {\n    formConfig: {\n      type: Object,\n      required: true\n    },\n    value: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: {\n    // 设置默认值\n    setDefaultValue() {\n      const formData = { ...this.value };\n      this.formConfig.formItemList.forEach(({ key, value }) => {\n        if (formData[key] === undefined || formData[key] === null) {\n          formData[key] = value;\n        }\n      });\n      this.$emit("input", formData);\n    },\n    isColonFn(item) {\n      let colon = ""\n      if (item.label) {\n        if (item.isColon) {\n          colon = ""\n        } else {\n          colon = ":"\n        }\n      } else {\n        colon = ""\n      }\n      return colon\n    }\n  },\n  mounted() {\n    this.setDefaultValue();\n  }\n};\n<\/script>\n<style>\n</style>\n')])])]),t("p",[e._v("组件中调用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<searchForm :formConfig="formConfig" :value="form"></searchForm>\n')])])]),t("p",[e._v("data里定义")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('form: {\n  time: "2019-10-31" // 默认值设置\n},\nformConfig: {\n  formItemList: [\n    {\n      type: "date",\n      prop: "time",\n      dateFormate: "yyyy-MM-dd",\n      label: "统计时间",\n      placeholder: "选择时间"\n    }\n  ],\n  operate: [\n    {\n      icon: "el-icon-search",\n      type: "primary",\n      name: "查询",\n      handleClick: this.search // 回调函数 在调用组件里定义\n    }\n  ]\n}\n')])])]),t("blockquote",[t("p",[e._v("主要是利用数据去渲染需要的表单")])]),e._v(" "),t("comment-comment")],1)}),[],!1,null,null,null);n.default=i.exports}}]);